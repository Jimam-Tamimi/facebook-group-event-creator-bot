# Form implementation generated from reading ui file '.\untitled.ui'
#
# Created by: PyQt6 UI code generator 6.3.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from threading import Thread
from PyQt6 import QtCore, QtGui, QtWidgets
import os
from time import sleep
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.support.ui import WebDriverWait
from selenium.common.exceptions import TimeoutException, NoSuchElementException
from selenium.webdriver.common.action_chains import ActionChains
import pandas as pd
from datetime import datetime, timedelta

 
class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(823, 625)
        MainWindow.setLayoutDirection(QtCore.Qt.LayoutDirection.LeftToRight)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setLayoutDirection(QtCore.Qt.LayoutDirection.LeftToRight)
        self.centralwidget.setObjectName("centralwidget")
        self.imageUploadBtn = QtWidgets.QPushButton(self.centralwidget)
        self.imageUploadBtn.setGeometry(QtCore.QRect(390, 260, 75, 23))
        self.imageUploadBtn.setObjectName("imageUploadBtn")
        self.imageUploadBtn.clicked.connect(self.imageUpload)

        self.groupListUploadBtn = QtWidgets.QPushButton(self.centralwidget)
        self.groupListUploadBtn.setGeometry(QtCore.QRect(390, 310, 75, 23))
        self.groupListUploadBtn.setObjectName("groupListUploadBtn")
        self.groupListUploadBtn.clicked.connect(self.groupListUpload)
        
        self.layoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.layoutWidget.setGeometry(QtCore.QRect(200, 70, 171, 51))
        self.layoutWidget.setObjectName("layoutWidget")
        
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.layoutWidget)
        self.verticalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.label_2 = QtWidgets.QLabel(self.layoutWidget)
        self.label_2.setObjectName("label_2")
        self.verticalLayout_2.addWidget(self.label_2)
        self.eventDate = QtWidgets.QTextEdit(self.layoutWidget)
        self.eventDate.setObjectName("eventDate")
        self.verticalLayout_2.addWidget(self.eventDate)
        self.layoutWidget_2 = QtWidgets.QWidget(self.centralwidget)
        self.layoutWidget_2.setGeometry(QtCore.QRect(460, 70, 201, 51))
        self.layoutWidget_2.setObjectName("layoutWidget_2")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.layoutWidget_2)
        self.verticalLayout_3.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.label_3 = QtWidgets.QLabel(self.layoutWidget_2)
        self.label_3.setObjectName("label_3")
        self.verticalLayout_3.addWidget(self.label_3)
        self.eventTime = QtWidgets.QTextEdit(self.layoutWidget_2)
        self.eventTime.setObjectName("eventTime")
        self.verticalLayout_3.addWidget(self.eventTime)
        self.layoutWidget_3 = QtWidgets.QWidget(self.centralwidget)
        self.layoutWidget_3.setGeometry(QtCore.QRect(460, 16, 201, 51))
        self.layoutWidget_3.setObjectName("layoutWidget_3")
        self.verticalLayout_4 = QtWidgets.QVBoxLayout(self.layoutWidget_3)
        self.verticalLayout_4.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.label_4 = QtWidgets.QLabel(self.layoutWidget_3)
        self.label_4.setObjectName("label_4")
        self.verticalLayout_4.addWidget(self.label_4)
        self.eventLink = QtWidgets.QTextEdit(self.layoutWidget_3)
        self.eventLink.setObjectName("eventLink")
        self.verticalLayout_4.addWidget(self.eventLink)
        self.layoutWidget_4 = QtWidgets.QWidget(self.centralwidget)
        self.layoutWidget_4.setGeometry(QtCore.QRect(200, 140, 461, 111))
        self.layoutWidget_4.setObjectName("layoutWidget_4")
        self.verticalLayout_5 = QtWidgets.QVBoxLayout(self.layoutWidget_4)
        self.verticalLayout_5.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_5.setObjectName("verticalLayout_5")
        self.label_5 = QtWidgets.QLabel(self.layoutWidget_4)
        self.label_5.setObjectName("label_5")
        self.verticalLayout_5.addWidget(self.label_5)
        self.description = QtWidgets.QTextEdit(self.layoutWidget_4)
        self.description.setObjectName("description")
        self.verticalLayout_5.addWidget(self.description)
        self.accountListUploadBtn = QtWidgets.QPushButton(self.centralwidget)
        self.accountListUploadBtn.setGeometry(QtCore.QRect(390, 360, 75, 23))
        self.accountListUploadBtn.setObjectName("accountListUploadBtn")
        self.accountListUploadBtn.clicked.connect(self.accountListUpload)


        
        self.imageLable = QtWidgets.QLabel(self.centralwidget)
        self.imageLable.setGeometry(QtCore.QRect(200, 280, 461, 20))
        self.imageLable.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.imageLable.setObjectName("imageLable")
        self.groupListLable = QtWidgets.QLabel(self.centralwidget)
        self.groupListLable.setGeometry(QtCore.QRect(200, 330, 461, 20))
        self.groupListLable.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.groupListLable.setObjectName("groupListLable")
        self.accountListLable = QtWidgets.QLabel(self.centralwidget)
        self.accountListLable.setGeometry(QtCore.QRect(200, 380, 461, 20))
        self.accountListLable.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.accountListLable.setObjectName("accountListLable")
        self.layoutWidget_5 = QtWidgets.QWidget(self.centralwidget)
        self.layoutWidget_5.setGeometry(QtCore.QRect(323, 450, 210, 31))
        self.layoutWidget_5.setObjectName("layoutWidget_5")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.layoutWidget_5)
        self.horizontalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.label_10 = QtWidgets.QLabel(self.layoutWidget_5)
        self.label_10.setObjectName("label_10")
        self.horizontalLayout_2.addWidget(self.label_10)
        self.imageUploadTime = QtWidgets.QTextEdit(self.layoutWidget_5)
        self.imageUploadTime.setObjectName("imageUploadTime")
        self.horizontalLayout_2.addWidget(self.imageUploadTime)
        self.runBtn = QtWidgets.QPushButton(self.centralwidget)
        self.runBtn.setGeometry(QtCore.QRect(390, 500, 75, 23))
        self.runBtn.setObjectName("runBtn")
        self.runBtn.clicked.connect(self.runOperation)

        
        
        self.widget = QtWidgets.QWidget(self.centralwidget)
        self.widget.setGeometry(QtCore.QRect(200, 16, 171, 51))
        self.widget.setObjectName("widget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.widget)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setObjectName("verticalLayout")
        self.label = QtWidgets.QLabel(self.widget)
        self.label.setObjectName("label")
        self.verticalLayout.addWidget(self.label)
        self.eventName = QtWidgets.QTextEdit(self.widget)
        self.eventName.setObjectName("eventName")
        self.verticalLayout.addWidget(self.eventName)
        self.widget1 = QtWidgets.QWidget(self.centralwidget)
        self.widget1.setGeometry(QtCore.QRect(390, 410, 81, 31))
        self.widget1.setObjectName("widget1")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.widget1)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.label_9 = QtWidgets.QLabel(self.widget1)
        self.label_9.setObjectName("label_9")
        self.horizontalLayout.addWidget(self.label_9)
        self.delay = QtWidgets.QTextEdit(self.widget1)
        self.delay.setObjectName("delay")
        self.horizontalLayout.addWidget(self.delay)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 823, 21))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        # self.delay = 
        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        
        
        
    def imageUpload(self):
        imageFile = QtWidgets.QFileDialog.getOpenFileName()
        self.imageFileLocation = imageFile[0]
        self.imageLable.setText(imageFile[0])
        
    def groupListUpload(self):
        groupList = QtWidgets.QFileDialog.getOpenFileName()
        self.groupListLocation = groupList[0]
        self.groupListLable.setText(groupList[0])
        
    def accountListUpload(self):
        accountList = QtWidgets.QFileDialog.getOpenFileName()
        self.accountListLocation = accountList[0]
        self.accountListLable.setText(accountList[0])

        
    def runOperation(self):
        attempted_accounts = pd.DataFrame([])
        
        DELAY = self.delay.toPlainText()

        accountsData = pd.read_csv(self.accountListLocation)
        currentTime = str(datetime.strftime(datetime.now(), "%Y-%m-%d__%H-%M-%S"))
        os.makedirs(currentTime)
        accountsData.to_csv(f'{currentTime}/accountsData.csv', index = False, header=True, encoding='utf-8') 
        
        
        groupsData = pd.read_csv(self.groupListLocation)
        
        
        
        newAccountList = []
        tmpAccount = []
        brIndex = int(len(accountsData) / 4)
        for i, accountsRow in accountsData.iterrows():
            tmpAccount.append(accountsRow)
            if(brIndex!=0 and  i%brIndex==0 and i!=0):
                newAccountList.append(tmpAccount)                    
                # print(len(tmpAccount))
                tmpAccount = []
                
        newAccountList.append(tmpAccount)                    
        
 
        for i, accountsRowList in enumerate(newAccountList):
            def runProcess():
                driver = webdriver.Chrome(executable_path='./chromedriver.exe')                
                for i, accountsRow in enumerate(accountsRowList):     
                    try:
                        email = accountsRow[0]
                        password = accountsRow[1]
                        driver.get("https://www.facebook.com/")
                        
                        # Login
                        emailInput = driver.find_element(By.ID, "email")
                        emailInput.send_keys(email)
                        passInput = driver.find_element(By.ID, "pass")
                        passInput.send_keys(password)
                        loginBtn = driver.find_element(By.NAME, 'login')

                        loginBtn.click()
                        sleep(2)
                        driver.get("https://www.facebook.com/")

                        # try:
                        myElem = WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.XPATH, '/html/body/div[1]/div/div[1]/div/div[3]/div/div/div/div[1]/div[1]/div/div[2]/div/div/div/div[3]/div/div[2]/div/div/div/div[1]/div/div[1]/span')))
                        # except TimeoutException:
                        #     # accountsData.drop(i, inplace=True)
                        #     driver.delete_all_cookies()
                        #     with open(f"{currentTime}/failedGroups.txt", "a+") as fg:
                        #         fg.write(f"Event creation failed with user: {accountsRow[0]} for group: {groupRow[0]}\n")
                        #     continue
                
                        for i, groupRow in groupsData.iterrows():
                            try:
                                groupLink = groupRow[0]
                                driver.get(groupLink)
                                try:
                                    joinBtn = WebDriverWait(driver, 2).until(EC.element_to_be_clickable((By.XPATH, '/html/body/div[1]/div/div[1]/div/div[3]/div/div/div/div[1]/div[1]/div[1]/div[2]/div/div/div/div/div[2]/div/div[1]/div/div/div[1]/div[2]/span/span')))
                                    if joinBtn.text.lower() == "join group":
                                        joinBtn.click()
                                        sleep(5)
                                except TimeoutException:
                                    pass

                                eventsTab = WebDriverWait(driver, DELAY).until(lambda d: d.find_element(By.LINK_TEXT, 'Events'))

                                eventsTab.click()


                                createEvent = WebDriverWait(driver, DELAY).until(lambda d: d.find_element(By.XPATH, '/html/body/div[1]/div/div[1]/div/div[3]/div/div/div/div[1]/div[1]/div[4]/div/div/div/div/div/div/div/div/div[1]/span/div/div[2]/div/div[2]/div/a/div/div[1]/div/span/span')) 

                                createEvent.click()

                                try:
                                    for i in range(2):
                                        sleep(1)
                                        createEvent = WebDriverWait(driver, DELAY).until(EC.element_to_be_clickable((By.XPATH, '/html/body/div[1]/div/div[1]/div/div[4]/div/div/div[1]/div/div[3]/div[2]/div[2]/div/div/div[2]/div[1]/div[1]/div[1]'))) 
                                        sleep(1)
                                        ActionChains(driver).move_to_element(createEvent).click(createEvent).perform()
                                except Exception:
                                    pass
                                


                                # try:
                                #     createEvent = WebDriverWait(driver, DELAY).until(EC.element_to_be_clickable((By.XPATH, '/html/body/div[1]/div/div[1]/div/div[4]/div/div/div[1]/div/div[3]/div[2]/div[2]/div/div/div[2]/div[1]/div[1]/div[1]'))) 
                                #     sleep(2)
                                #     ActionChains(driver).move_to_element(createEvent).click(createEvent).perform()
                                # # except Exception as e:
                                # #     print(e)
                                # #     pass



                                eventNameInput = WebDriverWait(driver, DELAY).until(EC.element_to_be_clickable((By.XPATH, '/html/body/div[1]/div/div[1]/div/div[4]/div/div/div[1]/div/div[3]/div[2]/div[1]/div/div[3]/div[1]/div[2]/div/div[2]/div[1]/div/label/div/div/input')))

                                eventNameInput.send_keys(self.eventName.toPlainText())


                                # eventDateInput = WebDriverWait(driver, DELAY).until(EC.element_to_be_clickable((By.XPATH, '/html/body/div[1]/div/div[1]/div/div[4]/div/div/div[1]/div/div[3]/div[2]/div[1]/div/div[3]/div[1]/div[2]/div/div[2]/div[2]/div[1]/div/div/div[1]/div/label/div/div[2]/div/input')))

                                # if(self.eventDate.toPlainText() != ""):
                                #     for _ in range(20):
                                #         eventDateInput.send_keys(Keys.BACK_SPACE)
                                #     eventDateInput.send_keys(self.eventDate.toPlainText())


                                # eventTimeInput = WebDriverWait(driver, DELAY).until(EC.element_to_be_clickable((By.XPATH, '/html/body/div[1]/div/div[1]/div/div[4]/div/div/div[1]/div/div[3]/div[2]/div[1]/div/div[3]/div[1]/div[2]/div/div[2]/div[2]/div[1]/div/div/div[2]/div/label/div/div/div/input')))

                                # if(self.eventTime.toPlainText() != ""):
                                #     for _ in range(20):
                                #         eventTimeInput.send_keys(Keys.BACK_SPACE)
                                #     eventTimeInput.send_keys(self.eventTime.toPlainText())
                                # else:
                                #     for _ in range(20):
                                #         eventTimeInput.send_keys(Keys.BACK_SPACE)
                                #     time = str(datetime.strftime(datetime.now()+ timedelta(hours=1), "%H:%M"))
                                #     if time[0] == "0":
                                #         time = time[1:-1]
                                #         eventTimeInput.send_keys(time)
                                    

                                nextBtn = WebDriverWait(driver, DELAY).until(EC.element_to_be_clickable((By.XPATH, "/html/body/div[1]/div/div[1]/div/div[4]/div/div/div[1]/div/div[3]/div[2]/div[1]/div/div[5]/div/div/div[2]/div/div")))
                                try:
                                    driver.switch_to.alert.accept()
                                except Exception:
                                    pass
                                # for i, b in enumerate(nextBtn):
                                
                                #     print(i, b.text)
                                ActionChains(driver).move_to_element(nextBtn).click(nextBtn).perform()
                                # nextBtn.click()


                                for i in range(5):
                                    location = WebDriverWait(driver, DELAY).until(EC.element_to_be_clickable((By.XPATH, f"/html/body/div[1]/div/div[1]/div/div[4]/div/div/div[1]/div/div[3]/div[2]/div[1]/div/div[3]/div[1]/div[2]/div/div[{i+1}]/div/div/div[1]/div[2]/div[1]/div/div/div[1]/span")))
                                    if(location.text.lower() == "external link"):
                                        ActionChains(driver).move_to_element(location).click(location).perform()
                                        break
                                    



                                linkInput = WebDriverWait(driver, DELAY).until(EC.element_to_be_clickable((By.CSS_SELECTOR, "input.oajrlxb2.f1sip0of.hidtqoto.e70eycc3.lzcic4wl.g5ia77u1.gcieejh5.bn081pho.humdl8nn.izx4hr6d.rq0escxv.oo9gr5id.qc3s4z1d.knj5qynh.fo6rh5oj.osnr6wyh.hv4rvrfc.dati1w0a.p0x8y401.k4urcfbm.iu8raji3.nfbje2wv"))) 
                                
                                ActionChains(driver).move_to_element(linkInput).send_keys_to_element(linkInput, self.eventLink.toPlainText()).perform()

                                nextBtn = WebDriverWait(driver, DELAY).until(lambda d: d.find_element(By.XPATH, "/html/body/div[1]/div/div[1]/div/div[4]/div/div/div[1]/div/div[3]/div[2]/div[1]/div/div[5]/div/div/div[2]/div/div/div[1]/div/span "))

                                ActionChains(driver).move_to_element(nextBtn).click(nextBtn).perform()


                                descriptionInput = WebDriverWait(driver, DELAY).until(EC.element_to_be_clickable((By.XPATH, "/html/body/div[1]/div/div[1]/div/div[4]/div/div/div[1]/div/div[3]/div[2]/div[1]/div/div[3]/div[1]/div[2]/div/div/div/label/div/div/textarea"))) 
                                ActionChains(driver).move_to_element(descriptionInput).send_keys_to_element(descriptionInput, self.description.toPlainText()).perform()


                                nextBtn = WebDriverWait(driver, DELAY).until(EC.element_to_be_clickable((By.XPATH, "/html/body/div[1]/div/div[1]/div/div[4]/div/div/div[1]/div/div[3]/div[2]/div[1]/div/div[5]/div/div/div[2]/div/div/div[1]/div/span")))

                                ActionChains(driver).move_to_element(nextBtn).click(nextBtn).perform()
                                
                                
                                nextBtn = WebDriverWait(driver, DELAY).until(lambda d: d.find_element(By.XPATH, "/html/body/div[1]/div/div[1]/div/div[4]/div/div/div[1]/div/div[3]/div[2]/div[1]/div/div[5]/div/div/div[2]/div/div/div[1]/div/span "))


                                ActionChains(driver).move_to_element(nextBtn).click(nextBtn).perform()



                                sleep(6)
                                createEvent = WebDriverWait(driver, DELAY).until(lambda d: d.find_element(By.LINK_TEXT, 'Edit')) 
                                createEvent.click()

                                sleep(1)
                                nextBtn = WebDriverWait(driver, DELAY).until(EC.element_to_be_clickable((By.XPATH, "/html/body/div[1]/div/div[1]/div/div[4]/div/div/div[1]/div/div[3]/div[2]/div[1]/div/div[5]/div/div/div/div/div")))
                                # for i, n in enumerate(nextBtn):
                                #     print(i, n.text)
                                    
                                # exit()
                                ActionChains(driver).move_to_element(nextBtn).click(nextBtn).perform()
                                
                                nextBtn = WebDriverWait(driver, DELAY).until(EC.element_to_be_clickable((By.XPATH, "/html/body/div[1]/div/div[1]/div/div[4]/div/div/div[1]/div/div[3]/div[2]/div[1]/div/div[5]/div/div/div[2]/div/div")))
                                ActionChains(driver).move_to_element(nextBtn).click(nextBtn).perform()

                                nextBtn = WebDriverWait(driver, DELAY).until(EC.element_to_be_clickable((By.XPATH, "/html/body/div[1]/div/div[1]/div/div[4]/div/div/div[1]/div/div[3]/div[2]/div[1]/div/div[5]/div/div/div[2]/div/div")))

                                ActionChains(driver).move_to_element(nextBtn).click(nextBtn).perform()



                                imageDel = WebDriverWait(driver, DELAY).until(EC.element_to_be_clickable((By.XPATH, "/html/body/div[1]/div/div[1]/div/div[4]/div/div/div[1]/div/div[3]/div[2]/div[1]/div/div[3]/div[1]/div[2]/div/div/div[1]/div[2]/div/div/div[2]/div"))) 
                                ActionChains(driver).move_to_element(imageDel).click(imageDel).perform()

                                imageInp = WebDriverWait(driver, DELAY).until(lambda d: d.find_element(By.XPATH, "/html/body/div[1]/div/div[1]/div/div[4]/div/div/div[1]/div/div[3]/div[2]/div[1]/div/div[3]/div[1]/div[2]/div/div/div[1]/div[2]/div/div/div/div/div/div/div/div/div[1]/input"))
                                imageInp.send_keys(self.imageFileLocation)


                                sleep(int(self.imageUploadTime.toPlainText()))
                                updateBtn = WebDriverWait(driver, DELAY).until(EC.element_to_be_clickable((By.XPATH, "/html/body/div[1]/div/div[1]/div/div[4]/div/div/div[1]/div/div[3]/div[2]/div[1]/div/div[5]/div/div/div[2]/div/div")))
                                sleep(6)
                                

                                ActionChains(driver).move_to_element(updateBtn).click(updateBtn).perform()
                                with open(f"{currentTime}/successGroups.txt", "a+") as fg:
                                    fg.write(f"Event creation successful with user: {accountsRow[0]} for group: {groupRow[0]}\n")
                                
                                sleep(6)
                                
                            except Exception as e:
                                with open(f"{currentTime}/failedGroups.txt", "a+") as fg:
                                    fg.write(f"Event creation failed with user: {accountsRow[0]} for group: {groupRow[0]}\n")
                                continue
                        
                        # logout1 = WebDriverWait(driver, DELAY).until(lambda d: d.find_element(By.XPATH, "/html/body/div[1]/div/div[1]/div/div[2]/div[4]/div[1]/span/div/div[1]"))
                        # ActionChains(driver).move_to_element(logout1).click(logout1).perform()
                        
                        # logout2 = WebDriverWait(driver, DELAY).until(lambda d: d.find_element(By.XPATH, "/html/body/div[1]/div/div[1]/div/div[2]/div[4]/div[2]/div/div[2]/div[1]/div[1]/div/div/div/div/div/div/div/div/div[1]/div/div/div[1]/div[2]/div/div[5]/div/div[1]"))
                        # ActionChains(driver).move_to_element(logout2).click(logout2).perform()
                        driver.delete_all_cookies()
                        driver.get("https://www.facebook.com/")
                        
                    except Exception as e:
                        with open(f"{currentTime}/failedAccounts.txt", "a+") as fg:
                            fg.write(f"Event creation failed with account: {accountsRow[0]} passwordL {accountsRow[1]}\n")
                        driver.delete_all_cookies()
                        continue
                
                with open(f"{currentTime}/completedAccounts.txt", "a+") as fg:
                    fg.write(f"username {accountsRow[0]} password {accountsRow[1]}\n completed" )
            t = Thread(target=runProcess)
            t.start()
            sleep(4)
 


    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.imageUploadBtn.setText(_translate("MainWindow", "Event Image"))
        self.groupListUploadBtn.setText(_translate("MainWindow", "Group List"))
        self.label_2.setText(_translate("MainWindow", "Event Date (02 august 2022)"))
        self.label_3.setText(_translate("MainWindow", "Event Time (22:10)"))
        self.label_4.setText(_translate("MainWindow", "Event Link"))
        self.label_5.setText(_translate("MainWindow", "Description"))
        self.accountListUploadBtn.setText(_translate("MainWindow", "Account List"))
        self.imageLable.setText(_translate("MainWindow", "Image File"))
        self.groupListLable.setText(_translate("MainWindow", "CSV File"))
        self.accountListLable.setText(_translate("MainWindow", "CSV File"))
        self.label_10.setText(_translate("MainWindow", "Image Upload Time "))
        self.imageUploadTime.setHtml(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:8.25pt; font-weight:400; font-style:normal;\">\n"
"<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p></body></html>"))
        self.runBtn.setText(_translate("MainWindow", "RUN"))
        self.label.setText(_translate("MainWindow", "Event Name"))
        self.label_9.setText(_translate("MainWindow", "Delay"))
        self.delay.setHtml(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:8.25pt; font-weight:400; font-style:normal;\">\n"
"<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p></body></html>"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    MainWindow.setMaximumHeight(550)
    MainWindow.setMaximumWidth(860)
    MainWindow.setMinimumHeight(550)
    MainWindow.setMinimumWidth(860)
    ui = Ui_MainWindow()
    
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec())
